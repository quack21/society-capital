{"ast":null,"code":"const defaultPrice = 500000;\nconst defaultDownPayment = 100000;\nconst defaultInterestRate = 0.05;\nconst defaultMonths = 360;\nconst defaultTaxRate = 0.0126;\nconst defaultInsuranceRate = 0.0014;\nconst defaultMortgageInsuranceRate = 0.011;\nconst defaultMortgageInsuranceEnabled = true;\nconst defaultMortgageInsuranceThreshold = 0.2;\nconst defaultAdditionalPrincipalPayment = 0;\n\nclass MortgageCalculator {\n  constructor() {\n    this.totalPrice = defaultPrice;\n    this.downPayment = defaultDownPayment;\n    this.interestRate = defaultInterestRate;\n    this.months = defaultMonths;\n    this.taxRate = defaultTaxRate;\n    this.insuranceRate = defaultInsuranceRate;\n    this.mortgageInsuranceRate = defaultMortgageInsuranceRate;\n    this.mortgageInsuranceEnabled = defaultMortgageInsuranceEnabled;\n    this.mortgageInsuranceThreshold = defaultMortgageInsuranceThreshold;\n    this.additionalPrincipalPayment = defaultAdditionalPrincipalPayment;\n  }\n\n  calculatePayment() {\n    let loanAmount = this.totalPrice - this.downPayment;\n    let paymentSchedule = MortgageCalculator.calculatePaymentSchedule(loanAmount, this.interestRate, this.months, this.additionalPrincipalPayment);\n    let piPayment = paymentSchedule.length ? paymentSchedule[0].totalPayment : 0;\n    let downPaymentPercentage = this.downPayment / this.totalPrice;\n    let mortgageInsurance = 0;\n\n    if (this.mortgageInsuranceEnabled && downPaymentPercentage < this.mortgageInsuranceThreshold) {\n      mortgageInsurance = loanAmount * this.mortgageInsuranceRate / 12;\n    }\n\n    let propertyTax = this.totalPrice * this.taxRate / 12;\n    let homeOwnerInsurance = MortgageCalculator.roundPenny(this.totalPrice * this.insuranceRate / 12);\n    return {\n      loanAmount: loanAmount,\n      principalAndInterest: piPayment,\n      tax: propertyTax,\n      insurance: homeOwnerInsurance,\n      total: piPayment + propertyTax + homeOwnerInsurance + mortgageInsurance,\n      termMonths: this.months,\n      paymentSchedule: paymentSchedule,\n      mortgageInsurance: mortgageInsurance\n    };\n  }\n\n  static calculatePaymentSchedule(loanAmount, annualRate, termMonths) {\n    let additionalPrincipalPayments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    const monthlyRate = annualRate / 12;\n    const monthlyPayment = MortgageCalculator.calculateMonthlyPIPayment(loanAmount, annualRate, termMonths);\n    let principal = MortgageCalculator.roundPenny(loanAmount);\n    let payments = [];\n    let totalInterest = 0;\n    let totalPayments = 0;\n    let i = 0;\n\n    while (principal > 0 && i < termMonths) {\n      let interestPayment = MortgageCalculator.roundPenny(principal * monthlyRate);\n      let principalPayment = MortgageCalculator.roundPenny(monthlyPayment - interestPayment + additionalPrincipalPayments);\n\n      if (principal > principalPayment) {\n        principal = MortgageCalculator.roundPenny(principal - principalPayment);\n      } else {\n        principalPayment = principal;\n        principal = 0;\n      }\n\n      let totalPayment = interestPayment + principalPayment;\n      totalInterest += interestPayment;\n      totalPayments += totalPayment;\n      payments[i] = {\n        count: i + 1,\n        interestPayment: interestPayment,\n        totalInterest: totalInterest,\n        principalPayment: principalPayment,\n        totalPayment: totalPayment,\n        totalPayments: totalPayments,\n        balance: principal\n      };\n      i++;\n    }\n\n    return payments;\n  }\n\n  static calculateMonthlyPIPayment(loanAmount, annualRate, termMonths) {\n    let monthlyRate = annualRate / 12;\n    let payment = monthlyRate * loanAmount * Math.pow(1 + monthlyRate, termMonths) / (Math.pow(1 + monthlyRate, termMonths) - 1);\n    return this.nextPenny(payment);\n  }\n\n  static roundPenny(value) {\n    return Math.round(value * 100) / 100;\n  }\n\n  static nextPenny(value) {\n    return Math.ceil(value * 100) / 100;\n  }\n\n}\n\nconst _calc = new MortgageCalculator();\n\nmodule.exports = {\n  createMortgageCalculator: function () {\n    return new MortgageCalculator();\n  },\n  calculatePayment: function () {\n    let totalPrice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPrice;\n    let downPayment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDownPayment;\n    let interestRate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultInterestRate;\n    let months = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultMonths;\n    let taxRate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultTaxRate;\n    let insuranceRate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : defaultInsuranceRate;\n    let mortgageInsuranceRate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : defaultMortgageInsuranceRate;\n    let mortgageInsuranceEnabled = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : defaultMortgageInsuranceEnabled;\n    let mortgageInsuranceThreshold = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : defaultMortgageInsuranceThreshold;\n    let additionalPrincipalPayment = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : defaultAdditionalPrincipalPayment;\n    _calc.totalPrice = totalPrice;\n    _calc.downPayment = downPayment;\n    _calc.interestRate = interestRate;\n    _calc.months = months;\n    _calc.taxRate = taxRate;\n    _calc.insuranceRate = insuranceRate;\n    _calc.mortgageInsuranceRate = mortgageInsuranceRate;\n    _calc.mortgageInsuranceEnabled = mortgageInsuranceEnabled;\n    _calc.mortgageInsuranceThreshold = mortgageInsuranceThreshold;\n    _calc.additionalPrincipalPayment = additionalPrincipalPayment;\n    return _calc.calculatePayment();\n  },\n  nextPenny: MortgageCalculator.nextPenny\n};","map":{"version":3,"names":["defaultPrice","defaultDownPayment","defaultInterestRate","defaultMonths","defaultTaxRate","defaultInsuranceRate","defaultMortgageInsuranceRate","defaultMortgageInsuranceEnabled","defaultMortgageInsuranceThreshold","defaultAdditionalPrincipalPayment","MortgageCalculator","constructor","totalPrice","downPayment","interestRate","months","taxRate","insuranceRate","mortgageInsuranceRate","mortgageInsuranceEnabled","mortgageInsuranceThreshold","additionalPrincipalPayment","calculatePayment","loanAmount","paymentSchedule","calculatePaymentSchedule","piPayment","length","totalPayment","downPaymentPercentage","mortgageInsurance","propertyTax","homeOwnerInsurance","roundPenny","principalAndInterest","tax","insurance","total","termMonths","annualRate","additionalPrincipalPayments","monthlyRate","monthlyPayment","calculateMonthlyPIPayment","principal","payments","totalInterest","totalPayments","i","interestPayment","principalPayment","count","balance","payment","Math","pow","nextPenny","value","round","ceil","_calc","module","exports","createMortgageCalculator"],"sources":["C:/Users/QUACK/Desktop/Society Capital/society_capital/node_modules/mortgage-js/index.js"],"sourcesContent":["const defaultPrice = 500000;\nconst defaultDownPayment = 100000;\nconst defaultInterestRate = 0.05;\nconst defaultMonths = 360;\nconst defaultTaxRate = 0.0126;\nconst defaultInsuranceRate = 0.0014;\nconst defaultMortgageInsuranceRate = 0.011;\nconst defaultMortgageInsuranceEnabled = true;\nconst defaultMortgageInsuranceThreshold = 0.2;\nconst defaultAdditionalPrincipalPayment = 0;\n\nclass MortgageCalculator {\n\n    constructor() {\n        this.totalPrice = defaultPrice;\n        this.downPayment = defaultDownPayment;\n        this.interestRate = defaultInterestRate;\n        this.months = defaultMonths;\n        this.taxRate = defaultTaxRate;\n        this.insuranceRate = defaultInsuranceRate;\n        this.mortgageInsuranceRate = defaultMortgageInsuranceRate;\n        this.mortgageInsuranceEnabled = defaultMortgageInsuranceEnabled;\n        this.mortgageInsuranceThreshold = defaultMortgageInsuranceThreshold;\n        this.additionalPrincipalPayment = defaultAdditionalPrincipalPayment;\n    }\n\n    calculatePayment() {\n        let loanAmount = this.totalPrice - this.downPayment;\n        let paymentSchedule = MortgageCalculator.calculatePaymentSchedule(loanAmount, this.interestRate, this.months, this.additionalPrincipalPayment);\n        let piPayment = paymentSchedule.length ? paymentSchedule[0].totalPayment : 0;\n        let downPaymentPercentage = this.downPayment / this.totalPrice;\n        let mortgageInsurance = 0;\n        if (this.mortgageInsuranceEnabled && downPaymentPercentage < this.mortgageInsuranceThreshold) {\n            mortgageInsurance = (loanAmount * this.mortgageInsuranceRate) / 12;\n        }\n\n        let propertyTax = (this.totalPrice * this.taxRate) / 12;\n        let homeOwnerInsurance = MortgageCalculator.roundPenny((this.totalPrice * this.insuranceRate) / 12);\n        return {\n            loanAmount: loanAmount,\n            principalAndInterest: piPayment,\n            tax: propertyTax,\n            insurance: homeOwnerInsurance,\n            total: piPayment + propertyTax + homeOwnerInsurance + mortgageInsurance,\n            termMonths: this.months,\n            paymentSchedule: paymentSchedule,\n            mortgageInsurance: mortgageInsurance\n        };\n    }\n\n    static calculatePaymentSchedule(loanAmount, annualRate, termMonths, additionalPrincipalPayments = 0) {\n        const monthlyRate = annualRate / 12;\n        const monthlyPayment = MortgageCalculator.calculateMonthlyPIPayment(loanAmount, annualRate, termMonths);\n        let principal = MortgageCalculator.roundPenny(loanAmount);\n        let payments = [];\n        let totalInterest = 0;\n        let totalPayments = 0;\n        let i = 0;\n        while (principal > 0 && i < termMonths) {\n            let interestPayment = MortgageCalculator.roundPenny(principal * monthlyRate);\n            let principalPayment = MortgageCalculator.roundPenny(monthlyPayment - interestPayment + additionalPrincipalPayments);\n            if (principal > principalPayment) {\n                principal = MortgageCalculator.roundPenny(principal - principalPayment);\n            }\n            else {\n                principalPayment = principal;\n                principal = 0;\n            }\n            let totalPayment = interestPayment + principalPayment;\n            totalInterest += interestPayment;\n            totalPayments += totalPayment;\n            payments[i] = {\n                count: i+1,\n                interestPayment: interestPayment,\n                totalInterest: totalInterest,\n                principalPayment: principalPayment,\n                totalPayment: totalPayment,\n                totalPayments: totalPayments,\n                balance: principal\n            };\n            i++;\n        }\n\n        return payments;\n    }\n\n    static calculateMonthlyPIPayment(loanAmount, annualRate, termMonths) {\n        let monthlyRate = annualRate / 12;\n        let payment = (monthlyRate * loanAmount * Math.pow(1 + monthlyRate, termMonths)) / (Math.pow(1 + monthlyRate, termMonths) - 1);\n        return this.nextPenny(payment);\n    }\n\n    static roundPenny(value) {\n        return Math.round(value * 100)/100;\n    }\n\n    static nextPenny(value) {\n        return Math.ceil(value * 100)/100;\n    }\n}\n\nconst _calc = new MortgageCalculator();\n\nmodule.exports = {\n    createMortgageCalculator: function(){\n        return new MortgageCalculator();\n    },\n    calculatePayment: function(totalPrice = defaultPrice,\n                               downPayment = defaultDownPayment,\n                               interestRate = defaultInterestRate,\n                               months = defaultMonths,\n                               taxRate = defaultTaxRate,\n                               insuranceRate = defaultInsuranceRate,\n                               mortgageInsuranceRate = defaultMortgageInsuranceRate,\n                               mortgageInsuranceEnabled = defaultMortgageInsuranceEnabled,\n                               mortgageInsuranceThreshold = defaultMortgageInsuranceThreshold,\n                               additionalPrincipalPayment = defaultAdditionalPrincipalPayment) {\n        _calc.totalPrice = totalPrice;\n        _calc.downPayment = downPayment;\n        _calc.interestRate = interestRate;\n        _calc.months = months;\n        _calc.taxRate = taxRate;\n        _calc.insuranceRate = insuranceRate;\n        _calc.mortgageInsuranceRate = mortgageInsuranceRate;\n        _calc.mortgageInsuranceEnabled = mortgageInsuranceEnabled;\n        _calc.mortgageInsuranceThreshold = mortgageInsuranceThreshold;\n        _calc.additionalPrincipalPayment = additionalPrincipalPayment;\n        return _calc.calculatePayment();\n    },\n    nextPenny: MortgageCalculator.nextPenny\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}